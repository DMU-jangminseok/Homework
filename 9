Git Rebase와 Merge 비교
Rebase: 두 브랜치의 변경 내용을 선형적으로 통합하여 깔끔한 이력을 생성. 기존 커밋 이력이 변경되므로, 정확한 이력이 필요한 경우 사용하지 않음.
git rebase master: master 브랜치의 최신 커밋을 기준으로 food 브랜치를 재배치.
git rebase --continue: 충돌 해결 후 rebase 계속 진행.
Merge: 여러 분기의 이력이 그대로 남아 있어 이력이 복잡해짐.
FF Merge (Fast-Forward Merge): 병합 시 두 브랜치가 직선적으로 이어져 있는 경우, 브랜치가 병합되는 형태.
3-Way Merge: 분기점에서 두 브랜치가 합쳐지는 복잡한 병합.
Rebase와 Merge 차이점
Rebase: 이력이 선형적이고 깔끔하게 유지됨. 병합 후 커밋 이력이 하나로 합쳐짐.
Merge: 여러 브랜치의 이력이 그대로 남아 복잡해짐.
커밋 수정 방법
git commit --amend: 최근 커밋 메시지 수정.
git commit --amend: 편집기에서 메시지 수정.
git commit --amend -m 'new message': 메시지 직접 수정.
HEAD 수정: 최신 커밋에 새로운 파일을 추가하거나 수정하여 커밋을 변경.
git commit --amend --no-edit: 메시지 수정 없이 커밋만 수정.
Interactive Rebase (git rebase -i)
여러 커밋을 수정할 때 사용.
git rebase -i HEAD~3: 마지막 3개의 커밋을 수정.
주요 명령어:
p(ick): 커밋 그대로 사용.
r(eword): 커밋 메시지 수정.
s(quash): 커밋을 결합.
d(rop): 커밋 삭제.
Rebase -i 사용 예시
git rebase -i HEAD~3: 마지막 3개의 커밋을 수정.
pick과 squash를 결합하여 커밋 메시지를 편집하거나 커밋을 합침.
결론
Rebase는 깔끔한 이력 관리에 유리하지만, 이력 변경이 필요할 때만 사용.
Merge는 이력을 그대로 보존하며 여러 분기의 변경 사항을 병합할 때 사용.
