Git 명령어 요약 (비교, 삭제, 복구, 별칭)
git diff: 파일 간의 비교
기본 비교:
$ git diff: 작업 디렉토리와 스테이징 영역 비교.
$ git diff --staged: 스테이징 영역과 깃 저장소 비교.
$ git diff HEAD: 작업 디렉토리와 깃 저장소 비교.
$ git diff HEAD~[숫자]: 특정 이전 커밋과 작업 디렉토리 비교.
커밋 간 비교:
$ git diff [커밋1] [커밋2]: 커밋1과 커밋2 비교.
$ git diff [커밋] HEAD: 특정 커밋과 최신 커밋 비교.
결과 표시:
추가된 내용: + 내용.
삭제된 내용: - 내용.
파일 삭제
파일 삭제:
$ rm [파일명]: 작업 디렉토리에서 파일 삭제.
$ git rm [파일명]: 작업 디렉토리와 스테이징 영역에서 파일 삭제.
$ git rm --cached [파일명]: 스테이징 영역에서만 파일 삭제.
상태 확인:
$ git status: 삭제된 파일은 deleted: [파일명]으로 표시.
$ git status -s: 삭제된 파일은 D [파일명], 추적되지 않은 파일은 ?? [파일명].
파일 복구
복구 기본 개념:
깃 저장소(A), 스테이징 영역(AB), 워킹 디렉토리(ABC)로 구성.
복구 명령어:
$ git restore [파일명]: 스테이징 영역 → 워킹 디렉토리 복구.
$ git restore --staged [파일명]: 깃 저장소 → 스테이징 영역 복구.
$ git restore --source=HEAD [파일명]: 깃 저장소 → 워킹 디렉토리 복구.
$ git restore --source=HEAD --staged --worktree [파일명]: 깃 저장소 → 스테이징 영역 및 워킹 디렉토리 모두 복구.
나만의 명령어 만들기 (Alias)
명령어 생성:
$ git config --global alias.[별칭] '[원래 명령어]'
예: $ git config --global alias.co 'checkout' → $ git co 실행 시 git checkout 동작.
저장 위치:
사용자 홈 디렉토리의 .gitconfig 파일에 저장.
활용 팁
커밋 비교와 파일 복구는 프로젝트 상태를 관리하는 데 유용.
별칭(alias)을 통해 자주 사용하는 명령어를 간단히 입력 가능.
